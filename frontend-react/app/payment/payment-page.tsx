"use client"

import { useState, useEffect } from "react"
import { useRouter, useSearchParams } from "next/navigation"
import { Header } from "@/components/header"
import { Footer } from "@/components/footer"
import { Button } from "@/components/ui/button"
import { Check, X, Clock } from "lucide-react"

export function PaymentPage() {
  const router = useRouter()
  const searchParams = useSearchParams()
  const [isMenuOpen, setIsMenuOpen] = useState(false)
  const [timeLeft, setTimeLeft] = useState(15 * 60) // 15 minutes in seconds
  const [showSuccessModal, setShowSuccessModal] = useState(false)
  const [showFailureModal, setShowFailureModal] = useState(false)

  // Mock package data - in real app, get from searchParams or API
  const packageData = {
    title: "G√≥i Premium 1 NƒÉm",
    subtitle: "Truy c·∫≠p kh√¥ng gi·ªõi h·∫°n t·∫•t c·∫£ kh√≥a h·ªçc",
    price: "299,000",
    duration: "12 th√°ng",
    features: [
      "Truy c·∫≠p kh√¥ng gi·ªõi h·∫°n",
      "T·∫•t c·∫£ kh√≥a h·ªçc cao c·∫•p",
      "Ki·ªÉm tra ti·∫øn ƒë·ªô",
      "Ch·ª©ng ch·ªâ ho√†n th√†nh",
      "H·ªó tr·ª£ ∆∞u ti√™n",
    ],
  }

  // Countdown timer
  useEffect(() => {
    const timer = setInterval(() => {
      setTimeLeft((prev) => {
        if (prev <= 1) {
          clearInterval(timer)
          return 0
        }
        return prev - 1
      })
    }, 1000)

    return () => clearInterval(timer)
  }, [])

  // Format time display
  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60)
    const secs = seconds % 60
    return `${mins.toString().padStart(2, "0")}:${secs.toString().padStart(2, "0")}`
  }

  // Simulate successful payment
  const simulateSuccessPayment = () => {
    setTimeout(() => {
      setShowSuccessModal(true)
    }, 2000)
  }

  // Simulate failed payment
  const simulateFailurePayment = () => {
    setTimeout(() => {
      setShowFailureModal(true)
    }, 2000)
  }

  const handleStartLearning = () => {
    setShowSuccessModal(false)
    router.push("/homepage")
  }

  const handleTryAgain = () => {
    setShowFailureModal(false)
    simulateSuccessPayment()
  }

  const handleSupport = () => {
    setShowFailureModal(false)
    // In real app, open support chat or redirect to support page
    alert("Chuy·ªÉn ƒë·∫øn trang h·ªó tr·ª£...")
  }

  return (
    <div className="min-h-screen bg-blue-50 relative overflow-hidden">
      {/* Header */}
      <Header onMenuToggle={() => setIsMenuOpen(!isMenuOpen)} />

      {/* Main Content */}
      <div className="flex pt-16">
        {/* Sidebar Navigation */}
        <div className="hidden lg:block w-64 bg-blue-100 min-h-screen p-4">
          <div className="space-y-2">
            <div className="flex items-center gap-3 p-3 bg-blue-200 rounded-lg">
              <div className="w-6 h-6 bg-blue-400 rounded flex items-center justify-center">
                <span className="text-white text-sm">üìö</span>
              </div>
              <span className="text-blue-800 font-medium">H·ªçc theo ch·ªß ƒë·ªÅ</span>
            </div>
            <div className="flex items-center gap-3 p-3 hover:bg-blue-150 rounded-lg cursor-pointer">
              <div className="w-6 h-6 bg-blue-300 rounded flex items-center justify-center">
                <span className="text-white text-sm">üìñ</span>
              </div>
              <span className="text-blue-800">T·ª´ ƒëi·ªÉn</span>
            </div>
            <div className="flex items-center gap-3 p-3 hover:bg-blue-150 rounded-lg cursor-pointer">
              <div className="w-6 h-6 bg-blue-300 rounded flex items-center justify-center">
                <span className="text-white text-sm">üìπ</span>
              </div>
              <span className="text-blue-800">Th·ª±c h√†nh Camera</span>
            </div>
            <div className="flex items-center gap-3 p-3 hover:bg-blue-150 rounded-lg cursor-pointer">
              <div className="w-6 h-6 bg-blue-300 rounded flex items-center justify-center">
                <span className="text-white text-sm">üí∞</span>
              </div>
              <span className="text-blue-800">C√°c g√≥i h·ªçc</span>
            </div>
            <div className="flex items-center gap-3 p-3 hover:bg-blue-150 rounded-lg cursor-pointer">
              <div className="w-6 h-6 bg-blue-300 rounded flex items-center justify-center">
                <span className="text-white text-sm">‚öôÔ∏è</span>
              </div>
              <span className="text-blue-800">C√†i ƒë·∫∑t</span>
            </div>
          </div>
        </div>

        {/* Payment Content */}
        <div className="flex-1 p-4 lg:p-8">
          <div className="max-w-2xl mx-auto">
            {/* Payment Card */}
            <div className="bg-white rounded-3xl shadow-xl p-8 border border-blue-200">
              {/* Package Info */}
              <div className="text-center mb-8">
                <h1 className="text-2xl font-bold text-blue-800 mb-2">{packageData.title}</h1>
                <p className="text-blue-600 mb-4">{packageData.subtitle}</p>
                <div className="text-4xl font-bold text-blue-700 mb-2">‚Ç´{packageData.price}</div>
                <p className="text-blue-500">Qu√©t m√£ QR ƒë·ªÉ thanh to√°n</p>
              </div>

              {/* QR Code */}
              <div className="flex justify-center mb-8">
                <div className="bg-white p-6 rounded-2xl border-2 border-blue-200 shadow-lg">
                  <div className="w-48 h-48 bg-blue-50 rounded-lg flex items-center justify-center">
                    {/* Mock QR Code */}
                    <div className="grid grid-cols-8 gap-1">
                      {Array.from({ length: 64 }).map((_, i) => (
                        <div key={i} className={`w-2 h-2 ${Math.random() > 0.5 ? "bg-blue-800" : "bg-white"}`} />
                      ))}
                    </div>
                  </div>
                </div>
              </div>

              {/* Timer */}
              <div className="text-center mb-8">
                <div className="inline-flex items-center gap-2 bg-blue-100 px-4 py-2 rounded-full">
                  <Clock className="w-4 h-4 text-blue-600" />
                  <span className="text-blue-700 font-medium">Th·ªùi gian c√≤n l·∫°i:</span>
                  <span className="text-blue-800 font-bold text-lg">{formatTime(timeLeft)}</span>
                </div>
              </div>

              {/* Payment Instructions */}
              <div className="space-y-4">
                <h3 className="text-lg font-bold text-blue-800 mb-4">H∆∞·ªõng d·∫´n thanh to√°n</h3>

                <div className="flex items-start gap-4 p-4 bg-blue-50 rounded-xl">
                  <div className="w-8 h-8 bg-blue-400 rounded-full flex items-center justify-center text-white font-bold text-sm">
                    1
                  </div>
                  <div>
                    <p className="text-blue-700">M·ªü ·ª©ng d·ª•ng ng√¢n h√†ng tr√™n ƒëi·ªán tho·∫°i c·ªßa b·∫°n</p>
                  </div>
                </div>

                <div className="flex items-start gap-4 p-4 bg-blue-50 rounded-xl">
                  <div className="w-8 h-8 bg-blue-400 rounded-full flex items-center justify-center text-white font-bold text-sm">
                    2
                  </div>
                  <div>
                    <p className="text-blue-700">Ch·ªçn ch·ª©c nƒÉng "Qu√©t m√£ QR" ho·∫∑c "QR Pay"</p>
                  </div>
                </div>

                <div className="flex items-start gap-4 p-4 bg-blue-50 rounded-xl">
                  <div className="w-8 h-8 bg-blue-400 rounded-full flex items-center justify-center text-white font-bold text-sm">
                    3
                  </div>
                  <div>
                    <p className="text-blue-700">Qu√©t m√£ QR ·ªü tr√™n v√† x√°c nh·∫≠n thanh to√°n</p>
                  </div>
                </div>

                <div className="flex items-start gap-4 p-4 bg-blue-50 rounded-xl">
                  <div className="w-8 h-8 bg-blue-400 rounded-full flex items-center justify-center text-white font-bold text-sm">
                    4
                  </div>
                  <div>
                    <p className="text-blue-700">ƒê·ª£i x√°c nh·∫≠n v√† b·∫Øt ƒë·∫ßu h·ªçc ngay!</p>
                  </div>
                </div>
              </div>

              {/* Demo Buttons */}
              <div className="mt-8 text-center space-y-3">
                <p className="text-blue-600 font-medium mb-4">Demo thanh to√°n:</p>
                <div className="flex gap-4 justify-center">
                  <Button
                    onClick={simulateSuccessPayment}
                    className="bg-blue-500 hover:bg-blue-600 text-white font-bold py-3 px-6 rounded-2xl shadow-lg"
                  >
                    Thanh to√°n th√†nh c√¥ng
                  </Button>
                  <Button
                    onClick={simulateFailurePayment}
                    className="bg-blue-400 hover:bg-blue-500 text-white font-bold py-3 px-6 rounded-2xl shadow-lg"
                  >
                    Thanh to√°n th·∫•t b·∫°i
                  </Button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Success Modal */}
      {showSuccessModal && (
        <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-3xl p-8 max-w-md w-full mx-4 text-center shadow-2xl">
            {/* Success Icon */}
            <div className="flex justify-center mb-6">
              <div className="w-16 h-16 bg-blue-500 rounded-full flex items-center justify-center">
                <Check className="w-8 h-8 text-white" />
              </div>
            </div>

            {/* Title */}
            <h3 className="text-2xl font-bold text-blue-800 mb-4">Ch√∫c M·ª´ng!</h3>
            <p className="text-blue-600 mb-6">
              Thanh to√°n th√†nh c√¥ng! B·∫°n ƒë√£ m·ªü kh√≥a ƒë∆∞·ª£c h√†nh tr√¨nh h·ªçc ng√¥n ng·ªØ k√Ω hi·ªáu ƒë·∫ßy th√∫ v·ªã
            </p>

            {/* Package Info */}
            <div className="bg-blue-50 rounded-2xl p-6 mb-6">
              <h4 className="font-bold text-blue-800 mb-4">G√≥i h·ªçc trong v√≤ng {packageData.duration}</h4>
              <ul className="text-left space-y-2">
                {packageData.features.map((feature, index) => (
                  <li key={index} className="flex items-center gap-2 text-blue-700">
                    <div className="w-1.5 h-1.5 bg-blue-400 rounded-full"></div>
                    <span className="text-sm">{feature}</span>
                  </li>
                ))}
              </ul>
            </div>

            {/* Start Learning Button */}
            <Button
              onClick={handleStartLearning}
              className="w-full bg-blue-500 hover:bg-blue-600 text-white font-bold py-3 px-6 rounded-2xl shadow-lg"
            >
              B·∫Øt ƒê·∫ßu H·ªçc Ngay
            </Button>
          </div>
        </div>
      )}

      {/* Failure Modal */}
      {showFailureModal && (
        <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-3xl p-8 max-w-md w-full mx-4 text-center shadow-2xl">
            {/* Error Icon */}
            <div className="flex justify-center mb-6">
              <div className="w-16 h-16 bg-red-500 rounded-full flex items-center justify-center">
                <X className="w-8 h-8 text-white" />
              </div>
            </div>

            {/* Title */}
            <h3 className="text-2xl font-bold text-red-600 mb-4">Oops! C√≥ l·ªói x·∫£y ra</h3>
            <p className="text-blue-600 mb-6">
              Thanh to√°n kh√¥ng th√†nh c√¥ng. ƒê·ª´ng lo l·∫Øng, ch√∫ng t√¥i s·∫Ω gi√∫p b·∫°n gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ n√†y!
            </p>

            {/* Error Reasons */}
            <div className="bg-red-50 border border-red-200 rounded-2xl p-6 mb-6">
              <h4 className="font-bold text-red-700 mb-4">C√≥ th·ªÉ do nh·ªØng nguy√™n nh√¢n sau:</h4>
              <ul className="text-left space-y-2 text-sm">
                <li className="flex items-start gap-2 text-red-600">
                  <div className="w-1.5 h-1.5 bg-red-400 rounded-full mt-2"></div>
                  <span>Th√¥ng tin th·∫ª kh√¥ng ch√≠nh x√°c ho·∫∑c h·∫øt h·∫°n</span>
                </li>
                <li className="flex items-start gap-2 text-red-600">
                  <div className="w-1.5 h-1.5 bg-red-400 rounded-full mt-2"></div>
                  <span>T√†i kho·∫£n kh√¥ng ƒë·ªß s·ªë d∆∞</span>
                </li>
                <li className="flex items-start gap-2 text-red-600">
                  <div className="w-1.5 h-1.5 bg-red-400 rounded-full mt-2"></div>
                  <span>V∆∞·ª£t qu√° h·∫°n m·ª©c giao d·ªãch h√†ng ng√†y</span>
                </li>
                <li className="flex items-start gap-2 text-red-600">
                  <div className="w-1.5 h-1.5 bg-red-400 rounded-full mt-2"></div>
                  <span>L·ªói k·∫øt n·ªëi m·∫°ng ho·∫∑c m√°y ch·ªß giao d·ªãch offline</span>
                </li>
              </ul>
            </div>

            {/* Action Buttons */}
            <div className="flex gap-3 mb-6">
              <Button
                onClick={handleTryAgain}
                className="flex-1 bg-green-500 hover:bg-green-600 text-white font-bold py-3 px-6 rounded-2xl"
              >
                Th·ª≠ L·∫°i
              </Button>
              <Button
                onClick={handleSupport}
                className="flex-1 bg-blue-500 hover:bg-blue-600 text-white font-bold py-3 px-6 rounded-2xl"
              >
                H·ªó Tr·ª£
              </Button>
            </div>

            {/* Divider */}
            <div className="border-t border-gray-200 pt-4">
              <p className="text-blue-500 text-sm font-medium mb-2">ƒê·ªôi Ph∆∞∆°ng Th·ª©c</p>
            </div>

            {/* Support Contact */}
            <div className="bg-blue-50 rounded-2xl p-4">
              <p className="text-blue-600 text-sm mb-2">C·∫ßn tr·ª£ gi√∫p ngay?</p>
              <p className="text-blue-700 font-medium text-sm">üìû Hotline: 1900 xxxx ‚Ä¢ ‚úâÔ∏è vslearn@gmail.com</p>
            </div>
          </div>
        </div>
      )}

      {/* Footer */}
      <Footer isOpen={isMenuOpen} onClose={() => setIsMenuOpen(false)} />
    </div>
  )
}

export default PaymentPage